:PROPERTIES:
:ID:       20220623T011222.999171
:END:
#+TITLE: Lambda-Emacs Documentation
#+DATE: May 03, 2022
#+AUTHOR: Colin McLear

Lambda-Emacs (ùõå-Emacs, or LEM) is intended to serve three goals. First, as a
useful starting point for the user's own custom configuration. Second, and
relatedly, as providing enough commentary on configuring Emacs such that it
might be useful to those new to emacs or even [[https://en.wikipedia.org/wiki/Text_editor][text-editors]] generally. Third, as
a "starter-kit" for writing and academic work in the humanities. 

* ùõå-Emacs File-Directory Structure

The configuration consists of a set of files specific to the user (all stored in
=lambda-user=) and more general files for ùõå-Emacs (init.el and the setup files in
=lambda-setup=). The structure is as follows:

- Directory Structure:
   + User Emacs directory (.emacs.d)
      - Local directory (.local)
         + Library directory (lambda-library)
            - Setup files (lambda-setup)
            - External packages (straight)
         + User directory (lambda-user)
         + Temp directory (temp)
            - Volatile storage (cache)
            - Non-volatile storage (etc)
- File structure:
   + early-init.el
   + early-config.el (in lambda-user, supplied by user, if any)
   + init.el
   + config.el (in lambda-user, supplied by user, if any)

Ideally the user will not need to do anything to the files =early-init.el=,
=init.el=, and those in =lambda-setup=, though they should read the code to get a
sense of what each file does. I have tried to annotate the code sufficiently so
that it does not assume familiarity with elisp to understand the basics of what
is going on.

All personal configuration by the user should go in =config.el= in the
=lambda-user= directory. This includes setting all variables, such as theme, font,
and bibliography and notes files. 

* ùõå-Emacs Customizable Variables
  :PROPERTIES:
  :ID:       20220720T151238.406634
  :END:
| Variable                   | Purpose                                                |
|----------------------------+--------------------------------------------------------|
| lem-prefix                 | Prefix for personal keybinds                           |
| lem-ui-default-font        | User default font                                      |
| lem-ui-variable-width-font | Variable width font                                    |
| lem-persistent-scratch     | Whether to make scratch buffer persist across sessions |
| lem-scratch-save-dir       | Where to save scratch file                             |
| lem-scratch-default-dir    | Default dir for scratch buffer                         |
| lem-ui-theme               | User prefererred theme                                 |
| lem-custom-themes-dir      | Directory for custom lambda-themes                     |
| lem-bib-notes              | File for reference notes                               |
| lem-bibliography           | User bibliography used in citations                    |
| lem-notes-dir              | Directory for user notes                               |
| lem-citar-note             | Template for citar notes                               |
| lem-project-dir            | Directory for user projects                            |
| lem-user-elisp-dir         | Directory for personal elisp projects                  |
| lem-splash-footer          | Splash footer message                                  |

=lem-prefix= defaults to =C-c C-SPC= and =lem-ui-theme= defaults to =lambda-themes=. The other variables need to be set by the user in the =config.el= file in the =lem-user-dir=.

In any case, be sure to set these variables in your =config.el= file *before* loading any specific modules. 


* Package Management
Lambda-Emacs uses [[https://github.com/radian-software/straight.el][straight.el]] to manage packages. This easily allows the user to add packages from any source (melpa, elpa, gituhub, gitlab, etc.). It is an /alternative/ to =package.el=, so the user should use it instead of the built-in Emacs package manager. To browse and temporarily install packages use =M-x straight-use-package= and type the name of the relevant package.

Otherwise any packages you would like you can install yourself using straight. You "declare" these packages in your =config.el= file like so, integrating with use-package:

#+begin_src emacs-lisp 
  (use-package my-package
    :straight (:type git :host github :repo "my-package")
    :config
    (setq my-package-setting))
#+end_src

Straight only loads packages that are explicitly declared in your config (and in the overall Lambda-Emacs setup). You can also "freeze" your package state, which is extremely helpful if you like to update frequently and run into problems with a package. Use =M-x straight-freeze-versions=. For further details consult the [[https://github.com/radian-software/straight.el#configuration-reproducibility][manual]]. 

When updating packages use =straight-pull-all= for all packages or =straight-pull-package= to update a specific package. See the [[https://github.com/radian-software/straight.el#automatic-repository-management][manual]] for further details. Before installing a package be sure it isn't already installed and configured in =lem-setup-dir=. To see if a package is already installed use =M-x find-library= and type the package name. 

* Code Conventions
- Where appropriate, use =custom-set-variable= rather than =setq= when dealing with
  =defcustom= variables. For some discussion see [[https://emacs.stackexchange.com/questions/102/advantages-of-setting-variables-with-setq-instead-of-custom-el][this stack exchange discussion]].
- Please consult the elisp [[https://github.com/bbatsov/emacs-lisp-style-guide][style guide]] for all style conventions with regard to
  naming, etc.
   + Note that all functions and variables are prefixed with the "lem" namespace.
   + Internal functions have their namespace delineated by "-\-" while
     user-facing functions have only a single "-".
- Provide =defcustom= variables for things we expect the user to modify and
  make sure it is in the appropriate group.
- Prefer =customize-set-variable= instead of =setq= for =defcustom= values. This helps
  make sure constructors or setters attached to the variable are run when the
  value is set.
- Provide verbose doc-strings for =defvar=, =defcustom=, =defun=, =defmacro=,
  etc to clearly document what is going on.
- Make sure to follow doc-string guidelines (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html][Documentation Tips]] or [[info:elisp#Documentation Tips][elisp#Documentation Tips]])
- Add comments for blocks of code, especially to describe /why/ the code is
  present, or the intention. These comments serve as documentation when reading
  the code where a doc-string is not an option.
- Add appropriate headers for sections of code
- Where appropriate, order packages alphabetically, e.g., in a setup file.
- Add or update documentation in the /docs/ folder. 
- If your PR addresses an issue, whether it closes or fixes the issue, or is
  just related to it, please add the issue number in your commit message or
  the description of your PR so they can be linked together.
